CREATE OR REPLACE PACKAGE ADAPT_CALC IS
  MIN_DATE  VARCHAR2(4);
  CURSOR CUR_INS IS
  SELECT CI_YEAR, CI_MONTH, CI_LASTDATE, CI_CODE, CI_MAXAMNT, CI_STAFFPAYPER, CI_STAFFSAVPER,
         CI_EMPLRPAYPER, CI_EMPLRSAVPER, CI_STAFFPAYOBJ, CI_STAFFSAVOBJ, CI_EMPLRPAYOBJ,
         CI_EMPLRSAVOBJ, CI_STAFFPAYALT, CI_STAFFSAVALT, CI_EMPLRPAYALT, CI_EMPLRSAVALT
  FROM P830;
  CURSOR CUR_MTAX IS
  SELECT CH_YEAR, CH_MONTH, CH_LASTDATE, CH_CODE, CH_MTD, CH_OBJECT, CH_ALTACC
  FROM   P831;
  CURSOR CUR_DTAX IS
  SELECT CD_YEAR, CD_MONTH, CD_LASTDATE, CD_CODE, CD_SEQ, CD_MINAMNT, CD_MAXAMNT,
         CD_PERCENT, CD_AMOUNT
  FROM   P832;
  CURSOR CUR_OBJ IS
  SELECT CO_YEAR, CO_MONTH, CO_LASTDATE, CO_CODE, CO_TIMERATE, CO_MAXAMNT,
         CO_WORKCODE2, CO_MINDAY, CO_MAXDAY, CO_INS1, CO_INS2, CO_INS3, CO_INS4,
         CO_INS5, CO_INS6, CO_INS7, CO_INS8, CO_INS9, CO_TAXCODE, CO_RELTAX,
         CO_TABLETAX, CO_PERCENTTAX, CO_AMOUNTTAX, CO_PERCENTEXP, CO_AMOUNTEXP,
         CO_EFFWORK, CO_TAXTYPE, CO_RIALOBJ, CO_AMNTRATE, CO_RATEEXP, CO_RATE
  FROM P833;
  CURSOR CUR_SEC IS
  SELECT CS_YEAR, CS_MONTH, CS_LASTDATE, CS_SEQ, CS_MAINOBJ1, CS_MAINOBJ2,
           CS_MAINOBJ3, CS_MAINOBJ4, CS_MAINOBJ5, CS_MAINOBJ6, CS_MAINOBJ7,
         CS_MAINOBJ8, CS_MAINOBJ9, CS_MAINOBJ10, CS_RELOBJ1, CS_RELOBJ2, CS_RELOBJ3,
         CS_RELOBJ4, CS_RELOBJ5, CS_RELOBJ6, CS_RELOBJ7, CS_RELOBJ8, CS_RELOBJ9,
         CS_RELOBJ10, CS_FACTOR, CS_MAXAMMNT, CS_OPCODE, CS_OPMTD, CS_RATE, CS_TAXCODE
  FROM P834;
  CURSOR CUR_TBL IS
  SELECT CJ_YEAR, CJ_MONTH, CJ_LASTDATE, CJ_OBJECT, CJ_SEQ, CJ_MINAMNT,
         CJ_MAXAMNT, CJ_RATE, CJ_TAXCODE
  FROM P835;
  CURSOR CUR_FRM IS
  SELECT CF_YEAR, CF_MONTH, CF_LASTDATE, CF_MAINOBJ, CF_LEVELCALC, CF_SEQ,
          CF_MAINOP, CF_OBJ1, CF_METHOD1, CF_RATE1, CF_OPERATE1, CF_OBJ2, CF_METHOD2,
         CF_RATE2, CF_OPERATE2, CF_OBJ3, CF_METHOD3, CF_RATE3, CF_FACTOR, CF_MAXAMNT
  FROM P836;
  CURSOR CUR_ETC IS
  SELECT CE_YEAR, CE_MONTH, CE_LASTDATE, CE_CHILD, CE_CHILDAMNT, CE_CHILDOBJ,
      CE_HOUSESINGLE, CE_HOUSEMARRIED, CE_HOUSEMOEEL, CE_HOUSEOBJ, CE_FOODSINGLE,
      CE_FOODMARRIED, CE_FOODMOEEL, CE_FOODOBJ, CE_BONSINGLE, CE_BONMARRIED,
      CE_BONMOEEL, CE_MINDAYSBON, CE_MAXDAYSBON, CE_BASEBON, CE_MINWAGE,
      CE_MINWORKAMNT, CE_PERCENTOFPAYMENT, CE_YEARLEAVE, CE_MAXSAVELEAVE,
      CE_MAXWORKHOUR, CE_ROUNDAMNT, CE_SAVECALC, CE_MAXCOMP, CE_ROUNDTYPE,
      CE_ROUNDDEL, CE_WWORKINSCODE, CE_LEARNCODE
  FROM P837;
  CURSOR CUR_WRK IS
  SELECT CW_YEAR, CW_MONTH, CW_LASTDATE, CW_CODE, CW_OBJ1, CW_OBJ2,
            CW_OBJ3, CW_OBJ4, CW_OBJ5, CW_OBJ6, CW_OBJ7, CW_OBJ8, CW_OBJ9, CW_OBJ10
  FROM P838;
  PROCEDURE PROCESS_PERSONEL(AYEAR IN INTEGER , AMONTH IN INTEGER);
END ADAPT_CALC;
/


CREATE OR REPLACE PACKAGE BODY ADAPT_CALC IS
---------------------------------------------------------------------------------------------
  FUNCTION NEXT_MONTH(I INTEGER) RETURN INTEGER IS
  BEGIN
    IF MOD(I,100) = 12 THEN
      RETURN((TRUNC(I/100)+1)*100+1);
    ELSE
      RETURN(I+1);
    END IF;
  END;
---------------------------------------------------------------------------------------------
  FUNCTION PREV_MONTH(I INTEGER) RETURN INTEGER IS
  BEGIN
    IF MOD(I,100) = 1 THEN
      RETURN((TRUNC(I/100)-1)*100+12);
    ELSE
      RETURN(I-1);
    END IF;
  END;
---------------------------------------------------------------------------------------------
  FUNCTION EXIST_BASETBL_INFO(AYEAR IN INTEGER, AMONTH IN INTEGER) RETURN BOOLEAN IS
    TEMP  INTEGER;
  BEGIN
    SELECT COUNT(1) INTO TEMP
    FROM   P830
    WHERE  CI_YEAR  = AYEAR
      AND  CI_MONTH = AMONTH;
    IF (TEMP > 0) THEN
      RETURN TRUE;
    END IF;
    SELECT COUNT(1) INTO TEMP
    FROM   P831
    WHERE  CH_YEAR  = AYEAR
      AND  CH_MONTH = AMONTH;
    IF (TEMP > 0) THEN
      RETURN TRUE;
    END IF;
    SELECT COUNT(1) INTO TEMP
    FROM   P833
    WHERE  CO_YEAR  = AYEAR
      AND  CO_MONTH = AMONTH;
    IF (TEMP > 0) THEN
      RETURN TRUE;
    END IF;
    SELECT COUNT(1) INTO TEMP
    FROM   P834
    WHERE  CS_YEAR  = AYEAR
      AND  CS_MONTH = AMONTH;
    IF (TEMP > 0) THEN
      RETURN TRUE;
    END IF;
    SELECT COUNT(1) INTO TEMP
    FROM   P835
    WHERE  CJ_YEAR  = AYEAR
      AND  CJ_MONTH = AMONTH;
    IF (TEMP > 0) THEN
      RETURN TRUE;
    END IF;
    SELECT COUNT(1) INTO TEMP
    FROM   P836
    WHERE  CF_YEAR  = AYEAR
      AND  CF_MONTH = AMONTH;
    IF (TEMP > 0) THEN
      RETURN TRUE;
    END IF;
    SELECT COUNT(1) INTO TEMP
    FROM   P837
    WHERE  CE_YEAR  = AYEAR
      AND  CE_MONTH = AMONTH;
    IF (TEMP > 0) THEN
      RETURN TRUE;
    END IF;
    SELECT COUNT(1) INTO TEMP
    FROM   P838
    WHERE  CW_YEAR  = AYEAR
      AND  CW_MONTH = AMONTH;
    IF (TEMP > 0) THEN
      RETURN TRUE;
    END IF;
    RETURN FALSE;
  END EXIST_BASETBL_INFO;
---------------------------------------------------------------------------------------------
  PROCEDURE SELECT_MINDATE(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
    TEMP   VARCHAR2(4);
    TEMP1  VARCHAR2(4);
    AFLAG BOOLEAN;
  BEGIN
    MIN_DATE  := '9999';
    SELECT MIN(CI_LASTDATE) INTO TEMP
    FROM   P830
    WHERE  CI_YEAR  = AYEAR
      AND  CI_MONTH = AMONTH;
    SELECT MIN(CI_LASTDATE) INTO TEMP1
    FROM   P830
    WHERE  (CI_YEAR*100+CI_MONTH) < AYEAR*100+AMONTH
      AND  (CI_YEAR*100+CI_MONTH) > TO_NUMBER(TEMP);
    IF (TEMP1 < MIN_DATE) AND (TEMP1 IS NOT NULL) THEN
      MIN_DATE:= TEMP1;
    END IF;
    IF (TEMP < MIN_DATE) THEN
      MIN_DATE:= TEMP;
    END IF;
    SELECT MIN(CH_LASTDATE) INTO TEMP
    FROM   P831
    WHERE  CH_YEAR  = AYEAR
      AND  CH_MONTH = AMONTH;
    SELECT MIN(CH_LASTDATE) INTO TEMP1
    FROM   P831
    WHERE  (CH_YEAR*100+CH_MONTH) < AYEAR*100+AMONTH
      AND  (CH_YEAR*100+CH_MONTH) > TO_NUMBER(TEMP);
    IF (TEMP1 < MIN_DATE) AND (TEMP1 IS NOT NULL) THEN
      MIN_DATE:= TEMP1;
    END IF;
    IF (TEMP < MIN_DATE) THEN
      MIN_DATE:= TEMP;
    END IF;
    SELECT MIN(CO_LASTDATE) INTO TEMP
    FROM   P833
    WHERE  CO_YEAR  = AYEAR
      AND  CO_MONTH = AMONTH;
    SELECT MIN(CO_LASTDATE) INTO TEMP1
    FROM   P833
    WHERE  (CO_YEAR*100+CO_MONTH) < AYEAR*100+AMONTH
      AND  (CO_YEAR*100+CO_MONTH) > TO_NUMBER(TEMP);
    IF (TEMP1 < MIN_DATE) AND (TEMP1 IS NOT NULL) THEN
      MIN_DATE:= TEMP1;
    END IF;
    IF (TEMP < MIN_DATE) THEN
      MIN_DATE:= TEMP;
    END IF;
    SELECT MIN(CS_LASTDATE) INTO TEMP
    FROM   P834
    WHERE  CS_YEAR  = AYEAR
      AND  CS_MONTH = AMONTH;
    SELECT MIN(CS_LASTDATE) INTO TEMP1
    FROM   P834
    WHERE  (CS_YEAR*100+CS_MONTH) < AYEAR*100+AMONTH
      AND  (CS_YEAR*100+CS_MONTH) > TO_NUMBER(TEMP);
    IF (TEMP1 < MIN_DATE) AND (TEMP1 IS NOT NULL) THEN
      MIN_DATE:= TEMP1;
    END IF;
    IF (TEMP < MIN_DATE) THEN
      MIN_DATE:= TEMP;
    END IF;
    SELECT MIN(CJ_LASTDATE) INTO TEMP
    FROM   P835
    WHERE  CJ_YEAR  = AYEAR
      AND  CJ_MONTH = AMONTH;
    SELECT MIN(CJ_LASTDATE) INTO TEMP1
    FROM   P835
    WHERE  (CJ_YEAR*100+CJ_MONTH) < AYEAR*100+AMONTH
      AND  (CJ_YEAR*100+CJ_MONTH) > TO_NUMBER(TEMP);
    IF (TEMP1 < MIN_DATE) AND (TEMP1 IS NOT NULL) THEN
      MIN_DATE:= TEMP1;
    END IF;
    IF (TEMP < MIN_DATE) THEN
      MIN_DATE:= TEMP;
    END IF;
    SELECT MIN(CF_LASTDATE) INTO TEMP
    FROM   P836
    WHERE  CF_YEAR  = AYEAR
      AND  CF_MONTH = AMONTH;
    SELECT MIN(CF_LASTDATE) INTO TEMP1
    FROM   P836
    WHERE  (CF_YEAR*100+CF_MONTH) < AYEAR*100+AMONTH
      AND  (CF_YEAR*100+CF_MONTH) > TO_NUMBER(TEMP);
    IF (TEMP1 < MIN_DATE) AND (TEMP1 IS NOT NULL) THEN
      MIN_DATE:= TEMP1;
    END IF;
    IF (TEMP < MIN_DATE) THEN
      MIN_DATE:= TEMP;
    END IF;
    SELECT MIN(CE_LASTDATE) INTO TEMP
    FROM   P837
    WHERE  CE_YEAR  = AYEAR
      AND  CE_MONTH = AMONTH;
    SELECT MIN(CE_LASTDATE) INTO TEMP1
    FROM   P837
    WHERE  (CE_YEAR*100+CE_MONTH) < AYEAR*100+AMONTH
      AND  (CE_YEAR*100+CE_MONTH) > TO_NUMBER(TEMP);
    IF (TEMP1 < MIN_DATE) AND (TEMP1 IS NOT NULL) THEN
      MIN_DATE:= TEMP1;
    END IF;
    IF (TEMP < MIN_DATE) THEN
      MIN_DATE:= TEMP;
    END IF;
    SELECT MIN(CW_LASTDATE) INTO TEMP
    FROM   P838
    WHERE  CW_YEAR  = AYEAR
      AND  CW_MONTH = AMONTH;
    SELECT MIN(CW_LASTDATE) INTO TEMP1
    FROM   P838
    WHERE  (CW_YEAR*100+CW_MONTH) < AYEAR*100+AMONTH
      AND  (CW_YEAR*100+CW_MONTH) > TO_NUMBER(TEMP);
    IF (TEMP1 < MIN_DATE) AND (TEMP1 IS NOT NULL) THEN
      MIN_DATE:= TEMP1;
    END IF;
    IF (TEMP < MIN_DATE) THEN
      MIN_DATE:= TEMP;
    END IF;
  END SELECT_MINDATE;
---------------------------------------------------------------------------------------------
  PROCEDURE FILLA_PERSONEL(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
    CURSOR CUR_CHPRS IS
    SELECT CM_IDNO, MIN(CM_LASTDATE) MDATE
    FROM   P811
    WHERE  CM_YEAR  = AYEAR
      AND  CM_MONTH = AMONTH
    GROUP BY CM_IDNO;

    CURSOR CUR_CHOBJ IS
    SELECT CP_IDNO, MIN(CP_LASTDATE) MDATE
    FROM   P820
    WHERE  CP_YEAR  = AYEAR
      AND  CP_MONTH = AMONTH
    GROUP BY CP_IDNO;
    TFLAG BOOLEAN;
    TEMP  VARCHAR2(4);
    TEMP1 VARCHAR2(4);
    FDATE VARCHAR2(4);
  BEGIN
    TFLAG:= EXIST_BASETBL_INFO(AYEAR,AMONTH);
    SELECT_MINDATE(AYEAR,AMONTH);
    IF TFLAG THEN
      INSERT INTO   A_PERSONEL(AMS_IDNO, AMS_DATE)
             SELECT MS_IDNO, MIN_DATE
             FROM   P115
             WHERE  MS_YEAR  = AYEAR
               AND  MS_MONTH = AMONTH;
    END IF;
    FOR REC_CHPRS IN CUR_CHPRS LOOP
      SELECT MIN(CM_LASTDATE) INTO TEMP
      FROM   P811
      WHERE  (CM_YEAR*100+CM_YEAR) < AYEAR*100+AMONTH
        AND  (CM_YEAR*100+CM_YEAR) > TO_NUMBER(REC_CHPRS.MDATE)
        AND  (CM_IDNO = REC_CHPRS.CM_IDNO);
      IF TEMP IS NULL THEN
        TEMP:= REC_CHPRS.MDATE;
      END IF;
      IF TFLAG THEN
        IF (TEMP < MIN_DATE) THEN
          UPDATE A_PERSONEL
          SET    AMS_DATE = TEMP
          WHERE  AMS_IDNO = REC_CHPRS.CM_IDNO;
        END IF;
      ELSE
        IF (TEMP <= MIN_DATE) THEN
          INSERT INTO A_PERSONEL(AMS_IDNO, AMS_DATE)
          VALUES (REC_CHPRS.CM_IDNO, TEMP);
        ELSE
          INSERT INTO A_PERSONEL(AMS_IDNO, AMS_DATE)
          VALUES (REC_CHPRS.CM_IDNO, MIN_DATE);
        END IF;
      END IF;
    END LOOP;
    FOR REC_CHOBJ IN CUR_CHOBJ LOOP
      SELECT MIN(CP_LASTDATE) INTO TEMP
      FROM   P820
      WHERE  (CP_YEAR*100+CP_YEAR) < AYEAR*100+AMONTH
        AND  (CP_YEAR*100+CP_YEAR) > TO_NUMBER(REC_CHOBJ.MDATE)
        AND  (CP_IDNO = REC_CHOBJ.CP_IDNO);
      BEGIN
        SELECT AMS_DATE
        INTO   TEMP1
        FROM   A_PERSONEL
        WHERE  AMS_IDNO = REC_CHOBJ.CP_IDNO;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          TEMP1:= '9999';
      END;
      IF TFLAG THEN
        IF (REC_CHOBJ.MDATE < TEMP1) AND (REC_CHOBJ.MDATE IS NOT NULL) THEN
          UPDATE A_PERSONEL
          SET    AMS_DATE = REC_CHOBJ.MDATE
          WHERE  AMS_IDNO = REC_CHOBJ.CP_IDNO;
        END IF;
      ELSE
        IF TEMP1 = '9999' THEN
          INSERT INTO A_PERSONEL(AMS_IDNO, AMS_DATE)
          VALUES (REC_CHOBJ.CP_IDNO, REC_CHOBJ.MDATE);
        ELSE
          IF (REC_CHOBJ.MDATE < TEMP1) AND (REC_CHOBJ.MDATE IS NOT NULL) THEN
            UPDATE A_PERSONEL
            SET    AMS_DATE = REC_CHOBJ.MDATE
            WHERE  AMS_IDNO = REC_CHOBJ.CP_IDNO;
          END IF;
        END IF;
      END IF;
    END LOOP;
  END FILLA_PERSONEL;
----------------------------------------------------------------------------------------------
  PROCEDURE FILLA_INS(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  BEGIN
    INSERT INTO A_INS(IN_YEAR, IN_MONTH, IN_CODE, IN_DESC, IN_MAXAMNT, IN_STAFFPAYPER,
                      IN_STAFFSAVPER, IN_EMPLRPAYPER, IN_EMPLRSAVPER, IN_STAFFPAYOBJ,
                      IN_STAFFSAVOBJ, IN_EMPLRPAYOBJ, IN_EMPLRSAVOBJ, IN_STAFFPAYALT,
                      IN_STAFFSAVALT, IN_EMPLRPAYALT, IN_EMPLRSAVALT)
           SELECT IN_YEAR, IN_MONTH, IN_CODE, IN_DESC, IN_MAXAMNT, IN_STAFFPAYPER,
                  IN_STAFFSAVPER, IN_EMPLRPAYPER, IN_EMPLRSAVPER, IN_STAFFPAYOBJ,
                  IN_STAFFSAVOBJ, IN_EMPLRPAYOBJ, IN_EMPLRSAVOBJ, IN_STAFFPAYALT,
                  IN_STAFFSAVALT, IN_EMPLRPAYALT, IN_EMPLRSAVALT
           FROM   P301
           WHERE  IN_YEAR = AYEAR-1
             OR   (IN_YEAR = AYEAR
             AND  IN_MONTH BETWEEN 1 AND (AMONTH-1));
  END FILLA_INS;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_INS(AREC_INS CUR_INS%ROWTYPE) IS
  BEGIN
    IF AREC_INS.CI_MAXAMNT IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_MAXAMNT = AREC_INS.CI_MAXAMNT
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_STAFFPAYPER IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_STAFFPAYPER = AREC_INS.CI_STAFFPAYPER
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_STAFFSAVPER IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_STAFFSAVPER = AREC_INS.CI_STAFFSAVPER
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_EMPLRPAYPER IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_EMPLRPAYPER = AREC_INS.CI_EMPLRPAYPER
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_EMPLRSAVPER IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_EMPLRSAVPER = AREC_INS.CI_EMPLRSAVPER
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_STAFFPAYOBJ IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_STAFFPAYOBJ = AREC_INS.CI_STAFFPAYOBJ
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_STAFFSAVOBJ IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_STAFFSAVOBJ = AREC_INS.CI_STAFFSAVOBJ
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_EMPLRPAYOBJ IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_EMPLRPAYOBJ = AREC_INS.CI_EMPLRPAYOBJ
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_EMPLRSAVOBJ IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_EMPLRSAVOBJ = AREC_INS.CI_EMPLRSAVOBJ
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_STAFFPAYALT IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_STAFFPAYALT = AREC_INS.CI_STAFFPAYALT
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_STAFFSAVALT IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_STAFFSAVALT = AREC_INS.CI_STAFFSAVALT
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_EMPLRPAYALT IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_EMPLRPAYALT = AREC_INS.CI_EMPLRPAYALT
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
    IF AREC_INS.CI_EMPLRSAVALT IS NOT NULL THEN
      UPDATE A_INS
      SET    IN_EMPLRSAVALT = AREC_INS.CI_EMPLRSAVALT
      WHERE  IN_YEAR    = TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,1,4))
        AND  IN_MONTH   >= TO_NUMBER(SUBSTR(AREC_INS.CI_LASTDATE,5,2))
        AND  IN_CODE    = AREC_INS.CI_CODE;
    END IF;
  END;
----------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_INS(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
    CURSOR CUR_INS IS
    SELECT CI_YEAR, CI_MONTH, CI_LASTDATE, CI_CODE, CI_MAXAMNT, CI_STAFFPAYPER, CI_STAFFSAVPER,
           CI_EMPLRPAYPER, CI_EMPLRSAVPER, CI_STAFFPAYOBJ, CI_STAFFSAVOBJ, CI_EMPLRPAYOBJ,
           CI_EMPLRSAVOBJ, CI_STAFFPAYALT, CI_STAFFSAVALT, CI_EMPLRPAYALT, CI_EMPLRSAVALT
    FROM   P830
    WHERE  CI_YEAR = AYEAR-1
      OR   (CI_YEAR = AYEAR
      AND  CI_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CI_YEAR, CI_MONTH, CI_LASTDATE;
  BEGIN
    FOR REC_INS IN CUR_INS LOOP
      UPDATE_A_INS(REC_INS);
    END LOOP;
  END PROCESS_INS;
----------------------------------------------------------------------------------------------
  PROCEDURE FILLA_TAX(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  BEGIN
    INSERT INTO A_MTAX(TH_YEAR, TH_MONTH, TH_CODE, TH_DESC, TH_MTD, TH_OBJECT, TH_ALTACC)
           SELECT TH_YEAR, TH_MONTH, TH_CODE, TH_DESC, TH_MTD, TH_OBJECT, TH_ALTACC
           FROM   P302
           WHERE  TH_YEAR = AYEAR-1
             OR  (TH_YEAR = AYEAR
             AND  TH_MONTH BETWEEN 1 AND (AMONTH-1));
    INSERT INTO A_DTAX(TD_YEAR, TD_MONTH, TD_CODE, TD_SEQ, TD_MINAMNT, TD_MAXAMNT,
                       TD_PERCENT, TD_AMOUNT)
           SELECT TD_YEAR, TD_MONTH, TD_CODE, TD_SEQ, TD_MINAMNT, TD_MAXAMNT,
                  TD_PERCENT, TD_AMOUNT
           FROM P303
           WHERE  TD_YEAR = AYEAR-1
             OR   (TD_YEAR = AYEAR
             AND  TD_MONTH BETWEEN 1 AND (AMONTH-1));
  END FILLA_TAX;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_MTAX(AREC_MTAX CUR_MTAX%ROWTYPE) IS
  BEGIN
    IF AREC_MTAX.CH_MTD IS NOT NULL THEN
      UPDATE A_MTAX
      SET    TH_MTD = AREC_MTAX.CH_MTD
      WHERE  TH_YEAR    = TO_NUMBER(SUBSTR(AREC_MTAX.CH_LASTDATE,1,4))
        AND  TH_MONTH   >= TO_NUMBER(SUBSTR(AREC_MTAX.CH_LASTDATE,5,2))
        AND  TH_CODE    = AREC_MTAX.CH_CODE;
    END IF;
    IF AREC_MTAX.CH_OBJECT IS NOT NULL THEN
      UPDATE A_MTAX
      SET    TH_OBJECT = AREC_MTAX.CH_OBJECT
      WHERE  TH_YEAR    = TO_NUMBER(SUBSTR(AREC_MTAX.CH_LASTDATE,1,4))
        AND  TH_MONTH   >= TO_NUMBER(SUBSTR(AREC_MTAX.CH_LASTDATE,5,2))
        AND  TH_CODE    = AREC_MTAX.CH_CODE;
    END IF;
    IF AREC_MTAX.CH_ALTACC IS NOT NULL THEN
      UPDATE A_MTAX
      SET    TH_ALTACC = AREC_MTAX.CH_ALTACC
      WHERE  TH_YEAR    = TO_NUMBER(SUBSTR(AREC_MTAX.CH_LASTDATE,1,4))
        AND  TH_MONTH   >= TO_NUMBER(SUBSTR(AREC_MTAX.CH_LASTDATE,5,2))
        AND  TH_CODE    = AREC_MTAX.CH_CODE;
    END IF;
  END;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_DTAX(AREC_DTAX CUR_DTAX%ROWTYPE) IS
  BEGIN
    IF AREC_DTAX.CD_MINAMNT IS NOT NULL THEN
      UPDATE A_DTAX
      SET    TD_MINAMNT = AREC_DTAX.CD_MINAMNT
      WHERE  TD_YEAR    = TO_NUMBER(SUBSTR(AREC_DTAX.CD_LASTDATE,1,4))
        AND  TD_MONTH   >= TO_NUMBER(SUBSTR(AREC_DTAX.CD_LASTDATE,5,2))
        AND  TD_CODE    = AREC_DTAX.CD_CODE
        AND  TD_SEQ     = AREC_DTAX.CD_SEQ;
    END IF;
    IF AREC_DTAX.CD_MAXAMNT IS NOT NULL THEN
      UPDATE A_DTAX
      SET    TD_MAXAMNT = AREC_DTAX.CD_MAXAMNT
      WHERE  TD_YEAR    = TO_NUMBER(SUBSTR(AREC_DTAX.CD_LASTDATE,1,4))
        AND  TD_MONTH   >= TO_NUMBER(SUBSTR(AREC_DTAX.CD_LASTDATE,5,2))
        AND  TD_CODE    = AREC_DTAX.CD_CODE
        AND  TD_SEQ     = AREC_DTAX.CD_SEQ;
    END IF;
    IF AREC_DTAX.CD_PERCENT IS NOT NULL THEN
      UPDATE A_DTAX
      SET    TD_PERCENT = AREC_DTAX.CD_PERCENT
      WHERE  TD_YEAR    = TO_NUMBER(SUBSTR(AREC_DTAX.CD_LASTDATE,1,4))
        AND  TD_MONTH   >= TO_NUMBER(SUBSTR(AREC_DTAX.CD_LASTDATE,5,2))
        AND  TD_CODE    = AREC_DTAX.CD_CODE
        AND  TD_SEQ     = AREC_DTAX.CD_SEQ;
    END IF;
    IF AREC_DTAX.CD_AMOUNT IS NOT NULL THEN
      UPDATE A_DTAX
      SET    TD_AMOUNT = AREC_DTAX.CD_AMOUNT
      WHERE  TD_YEAR   = TO_NUMBER(SUBSTR(AREC_DTAX.CD_LASTDATE,1,4))
        AND  TD_MONTH  >= TO_NUMBER(SUBSTR(AREC_DTAX.CD_LASTDATE,5,2))
        AND  TD_CODE   = AREC_DTAX.CD_CODE
        AND  TD_SEQ    = AREC_DTAX.CD_SEQ;
    END IF;
  END;
----------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_TAX(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
    CURSOR CUR_MTAX IS
    SELECT CH_YEAR, CH_MONTH, CH_LASTDATE, CH_CODE, CH_MTD, CH_OBJECT, CH_ALTACC
    FROM   P831
    WHERE  CH_YEAR = AYEAR-1
      OR   (CH_YEAR = AYEAR
      AND  CH_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CH_YEAR, CH_MONTH, CH_LASTDATE;
    CURSOR CUR_DTAX IS
    SELECT CD_YEAR, CD_MONTH, CD_LASTDATE, CD_CODE, CD_SEQ, CD_MINAMNT, CD_MAXAMNT,
           CD_PERCENT, CD_AMOUNT
    FROM   P832
    WHERE  CD_YEAR = AYEAR-1
      OR  (CD_YEAR = AYEAR
      AND  CD_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CD_YEAR, CD_MONTH, CD_LASTDATE;
  BEGIN
    FOR REC_MTAX IN CUR_MTAX LOOP
      UPDATE_A_MTAX(REC_MTAX);
    END LOOP;
    FOR REC_DTAX IN CUR_DTAX LOOP
      UPDATE_A_DTAX(REC_DTAX);
    END LOOP;
  END PROCESS_TAX;
----------------------------------------------------------------------------------------------
  PROCEDURE FILLA_OBJ(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  BEGIN
    INSERT INTO A_OBJ(OB_YEAR, OB_MONTH, OB_CODE, OB_DESC, OB_LEGER, OB_ALTACC, OB_FORCE,
             OB_CALCMTD, OB_CALCCODE, OB_TIMERATE, OB_WORKCODE1, OB_FACTOR, OB_MAXFACTOR,
             OB_MAXAMNT, OB_WORKCODE2, OB_MINDAY, OB_MAXDAY, OB_HIRE1, OB_HIRE2, OB_HIRE3,
             OB_HIRE4, OB_HIRE5, OB_HIRE6, OB_HIRE7, OB_HIRE8, OB_HIRE9, OB_HIRE10, OB_HIRE11,
             OB_HIRE12, OB_HIRE13, OB_HIRE14, OB_HIRE15, OB_HIRE16, OB_HIRE17, OB_HIRE18,
             OB_HIRE19, OB_HIRE20, OB_INS1, OB_INS2, OB_INS3, OB_INS4, OB_INS5, OB_INS6,
             OB_INS7, OB_INS8, OB_INS9, OB_TAXCODE, OB_RELTAX, OB_TABLETAX, OB_PERCENTTAX,
             OB_AMOUNTTAX, OB_PERCENTEXP, OB_AMOUNTEXP, OB_BACKPAY, OB_ACCUMULATE, OB_FISH,
             OB_EFFWORK, OB_MONTHDAYS, OB_CREATOR, OB_RATE, OB_TAXTYPE, OB_OBJTYPE, OB_TYPE,
             OB_WORKTYPE, OB_RIALOBJ, OB_AMNTRATE, OB_RATEEXP)
           SELECT OB_YEAR, OB_MONTH, OB_CODE, OB_DESC, OB_LEGER, OB_ALTACC, OB_FORCE,
             OB_CALCMTD, OB_CALCCODE, OB_TIMERATE, OB_WORKCODE1, OB_FACTOR, OB_MAXFACTOR,
             OB_MAXAMNT, OB_WORKCODE2, OB_MINDAY, OB_MAXDAY, OB_HIRE1, OB_HIRE2, OB_HIRE3,
             OB_HIRE4, OB_HIRE5, OB_HIRE6, OB_HIRE7, OB_HIRE8, OB_HIRE9, OB_HIRE10, OB_HIRE11,
             OB_HIRE12, OB_HIRE13, OB_HIRE14, OB_HIRE15, OB_HIRE16, OB_HIRE17, OB_HIRE18,
             OB_HIRE19, OB_HIRE20, OB_INS1, OB_INS2, OB_INS3, OB_INS4, OB_INS5, OB_INS6,
             OB_INS7, OB_INS8, OB_INS9, OB_TAXCODE, OB_RELTAX, OB_TABLETAX, OB_PERCENTTAX,
             OB_AMOUNTTAX, OB_PERCENTEXP, OB_AMOUNTEXP, OB_BACKPAY, OB_ACCUMULATE, OB_FISH,
             OB_EFFWORK, OB_MONTHDAYS, OB_CREATOR, OB_RATE, OB_TAXTYPE, OB_OBJTYPE, OB_TYPE,
             OB_WORKTYPE, OB_RIALOBJ, OB_AMNTRATE, OB_RATEEXP
           FROM   P305
           WHERE  OB_YEAR = AYEAR-1
             OR  (OB_YEAR = AYEAR
             AND  OB_MONTH BETWEEN 1 AND (AMONTH-1));
  END FILLA_OBJ;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_OBJ(AREC_OBJ CUR_OBJ%ROWTYPE) IS
  BEGIN
    IF AREC_OBJ.CO_TIMERATE IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_TIMERATE = AREC_OBJ.CO_TIMERATE
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_MAXAMNT IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_MAXAMNT = AREC_OBJ.CO_MAXAMNT
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_WORKCODE2 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_WORKCODE2 = AREC_OBJ.CO_WORKCODE2
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_MINDAY IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_MINDAY   = AREC_OBJ.CO_MINDAY
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_MAXDAY IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_MAXDAY   = AREC_OBJ.CO_MAXDAY
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS1 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS1     = AREC_OBJ.CO_INS1
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS2 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS2     = AREC_OBJ.CO_INS2
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS3 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS3     = AREC_OBJ.CO_INS3
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS4 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS4     = AREC_OBJ.CO_INS4
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS5 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS5     = AREC_OBJ.CO_INS5
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS6 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS6     = AREC_OBJ.CO_INS6
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS7 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS7     = AREC_OBJ.CO_INS7
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS8 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS8     = AREC_OBJ.CO_INS8
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_INS9 IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_INS9     = AREC_OBJ.CO_INS9
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_TAXCODE IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_TAXCODE  = AREC_OBJ.CO_TAXCODE
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_RELTAX IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_RELTAX  = AREC_OBJ.CO_RELTAX
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_TABLETAX IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_TABLETAX = AREC_OBJ.CO_TABLETAX
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_PERCENTTAX IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_PERCENTTAX = AREC_OBJ.CO_PERCENTTAX
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_AMOUNTTAX IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_AMOUNTTAX = AREC_OBJ.CO_AMOUNTTAX
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_PERCENTEXP IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_PERCENTEXP = AREC_OBJ.CO_PERCENTEXP
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_AMOUNTEXP IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_AMOUNTEXP = AREC_OBJ.CO_AMOUNTEXP
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_EFFWORK IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_EFFWORK  = AREC_OBJ.CO_EFFWORK
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_TAXTYPE IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_TAXTYPE  = AREC_OBJ.CO_TAXTYPE
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_RIALOBJ IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_RIALOBJ  = AREC_OBJ.CO_RIALOBJ
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_AMNTRATE IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_AMNTRATE = AREC_OBJ.CO_AMNTRATE
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_RATEEXP IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_RATEEXP  = AREC_OBJ.CO_RATEEXP
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
    IF AREC_OBJ.CO_RATE IS NOT NULL THEN
      UPDATE A_OBJ
      SET    OB_RATE     = AREC_OBJ.CO_RATE
      WHERE  OB_YEAR     = TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,1,4))
        AND  OB_MONTH    >= TO_NUMBER(SUBSTR(AREC_OBJ.CO_LASTDATE,5,2))
        AND  OB_CODE     = AREC_OBJ.CO_CODE;
    END IF;
  END UPDATE_A_OBJ;
----------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_OBJ(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
    CURSOR CUR_OBJ IS
    SELECT CO_YEAR, CO_MONTH, CO_LASTDATE, CO_CODE, CO_TIMERATE, CO_MAXAMNT,
           CO_WORKCODE2, CO_MINDAY, CO_MAXDAY, CO_INS1, CO_INS2, CO_INS3, CO_INS4,
           CO_INS5, CO_INS6, CO_INS7, CO_INS8, CO_INS9, CO_TAXCODE, CO_RELTAX,
           CO_TABLETAX, CO_PERCENTTAX, CO_AMOUNTTAX, CO_PERCENTEXP, CO_AMOUNTEXP,
           CO_EFFWORK, CO_TAXTYPE, CO_RIALOBJ, CO_AMNTRATE, CO_RATEEXP, CO_RATE
    FROM P833
    WHERE  CO_YEAR = AYEAR-1
      OR  (CO_YEAR = AYEAR
      AND  CO_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CO_YEAR, CO_MONTH, CO_LASTDATE;
  BEGIN
    FOR REC_OBJ IN CUR_OBJ LOOP
      UPDATE_A_OBJ(REC_OBJ);
    END LOOP;
  END PROCESS_OBJ;
----------------------------------------------------------------------------------------------
  PROCEDURE FILLA_SEC(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  BEGIN
    INSERT INTO A_SEC(SA_YEAR, SA_MONTH, SA_SEQ, SA_MAINOBJ1, SA_MAINOBJ2, SA_MAINOBJ3,
                SA_MAINOBJ4, SA_MAINOBJ5, SA_MAINOBJ6, SA_MAINOBJ7, SA_MAINOBJ8,
                SA_MAINOBJ9, SA_MAINOBJ10, SA_RELOBJ1, SA_RELOBJ2, SA_RELOBJ3, SA_RELOBJ4,
                SA_RELOBJ5, SA_RELOBJ6, SA_RELOBJ7, SA_RELOBJ8, SA_RELOBJ9, SA_RELOBJ10,
                SA_FACTOR, SA_MAXAMMNT, SA_OPCODE, SA_OPMTD, SA_RATE, SA_TAXCODE)
           SELECT SA_YEAR, SA_MONTH, SA_SEQ, SA_MAINOBJ1, SA_MAINOBJ2, SA_MAINOBJ3,
                SA_MAINOBJ4, SA_MAINOBJ5, SA_MAINOBJ6, SA_MAINOBJ7, SA_MAINOBJ8,
                SA_MAINOBJ9, SA_MAINOBJ10, SA_RELOBJ1, SA_RELOBJ2, SA_RELOBJ3, SA_RELOBJ4,
                SA_RELOBJ5, SA_RELOBJ6, SA_RELOBJ7, SA_RELOBJ8, SA_RELOBJ9, SA_RELOBJ10,
                SA_FACTOR, SA_MAXAMMNT, SA_OPCODE, SA_OPMTD, SA_RATE, SA_TAXCODE
           FROM   P311
           WHERE  SA_YEAR = AYEAR-1
             OR  (SA_YEAR = AYEAR
             AND  SA_MONTH BETWEEN 1 AND (AMONTH-1));
  END FILLA_SEC;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_SEC(AREC_SEC CUR_SEC%ROWTYPE) IS
  BEGIN
    IF AREC_SEC.CS_MAINOBJ1 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ1 = AREC_SEC.CS_MAINOBJ1
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ2 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ2 = AREC_SEC.CS_MAINOBJ2
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ3 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ3 = AREC_SEC.CS_MAINOBJ3
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ4 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ4 = AREC_SEC.CS_MAINOBJ4
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ5 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ5 = AREC_SEC.CS_MAINOBJ5
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ5 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ5 = AREC_SEC.CS_MAINOBJ5
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ6 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ6 = AREC_SEC.CS_MAINOBJ6
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ7 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ7 = AREC_SEC.CS_MAINOBJ7
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ8 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ8 = AREC_SEC.CS_MAINOBJ8
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ9 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ9 = AREC_SEC.CS_MAINOBJ9
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAINOBJ10 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAINOBJ10 = AREC_SEC.CS_MAINOBJ10
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ1 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ1  = AREC_SEC.CS_RELOBJ1
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ2 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ2  = AREC_SEC.CS_RELOBJ2
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ3 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ3  = AREC_SEC.CS_RELOBJ3
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ4 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ4  = AREC_SEC.CS_RELOBJ4
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ5 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ5  = AREC_SEC.CS_RELOBJ5
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ6 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ6  = AREC_SEC.CS_RELOBJ6
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ7 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ7  = AREC_SEC.CS_RELOBJ7
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ8 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ8  = AREC_SEC.CS_RELOBJ8
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ9 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ9  = AREC_SEC.CS_RELOBJ9
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RELOBJ10 IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RELOBJ10  = AREC_SEC.CS_RELOBJ10
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_FACTOR IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_FACTOR   = AREC_SEC.CS_FACTOR
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_MAXAMMNT IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_MAXAMMNT = AREC_SEC.CS_MAXAMMNT
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_OPCODE IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_OPCODE   = AREC_SEC.CS_OPCODE
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_OPMTD IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_OPMTD    = AREC_SEC.CS_OPMTD
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_RATE IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_RATE     = AREC_SEC.CS_RATE
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
    IF AREC_SEC.CS_TAXCODE IS NOT NULL THEN
      UPDATE A_SEC
      SET    SA_TAXCODE  = AREC_SEC.CS_TAXCODE
      WHERE  SA_YEAR     = TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,1,4))
        AND  SA_MONTH    >= TO_NUMBER(SUBSTR(AREC_SEC.CS_LASTDATE,5,2))
        AND  SA_SEQ      = AREC_SEC.CS_SEQ;
    END IF;
  END UPDATE_A_SEC;
----------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_SEC(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
    CURSOR CUR_SEC IS
    SELECT CS_YEAR, CS_MONTH, CS_LASTDATE, CS_SEQ, CS_MAINOBJ1, CS_MAINOBJ2,
           CS_MAINOBJ3, CS_MAINOBJ4, CS_MAINOBJ5, CS_MAINOBJ6, CS_MAINOBJ7,
           CS_MAINOBJ8, CS_MAINOBJ9, CS_MAINOBJ10, CS_RELOBJ1, CS_RELOBJ2, CS_RELOBJ3,
           CS_RELOBJ4, CS_RELOBJ5, CS_RELOBJ6, CS_RELOBJ7, CS_RELOBJ8, CS_RELOBJ9,
           CS_RELOBJ10, CS_FACTOR, CS_MAXAMMNT, CS_OPCODE, CS_OPMTD, CS_RATE, CS_TAXCODE
    FROM P834
    WHERE  CS_YEAR = AYEAR-1
      OR   (CS_YEAR = AYEAR
      AND  CS_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CS_YEAR, CS_MONTH, CS_LASTDATE;
  BEGIN
    FOR REC_SEC IN CUR_SEC LOOP
      UPDATE_A_SEC(REC_SEC);
    END LOOP;
  END PROCESS_SEC;
----------------------------------------------------------------------------------------------
  PROCEDURE FILLA_TBL(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  BEGIN
    INSERT INTO  A_TBL(JA_YEAR, JA_MONTH, JA_OBJECT, JA_SEQ, JA_MINAMNT, JA_MAXAMNT,
                       JA_RATE, JA_TAXCODE)
           SELECT JA_YEAR, JA_MONTH, JA_OBJECT, JA_SEQ, JA_MINAMNT, JA_MAXAMNT,
                  JA_RATE, JA_TAXCODE
           FROM   P312
           WHERE  JA_YEAR = AYEAR-1
             OR   (JA_YEAR = AYEAR
             AND  JA_MONTH BETWEEN 1 AND (AMONTH-1));
  END FILLA_TBL;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_TBL(AREC_TBL CUR_TBL%ROWTYPE) IS
  BEGIN
    IF AREC_TBL.CJ_MINAMNT IS NOT NULL THEN
      UPDATE A_TBL
      SET    JA_MINAMNT  = AREC_TBL.CJ_MINAMNT
      WHERE  JA_YEAR     = TO_NUMBER(SUBSTR(AREC_TBL.CJ_LASTDATE,1,4))
        AND  JA_MONTH    >= TO_NUMBER(SUBSTR(AREC_TBL.CJ_LASTDATE,5,2))
        AND  JA_OBJECT   = AREC_TBL.CJ_OBJECT
        AND  JA_SEQ      = AREC_TBL.CJ_SEQ;
    END IF;
    IF AREC_TBL.CJ_MAXAMNT IS NOT NULL THEN
      UPDATE A_TBL
      SET    JA_MAXAMNT  = AREC_TBL.CJ_MAXAMNT
      WHERE  JA_YEAR     = TO_NUMBER(SUBSTR(AREC_TBL.CJ_LASTDATE,1,4))
        AND  JA_MONTH    >= TO_NUMBER(SUBSTR(AREC_TBL.CJ_LASTDATE,5,2))
        AND  JA_OBJECT   = AREC_TBL.CJ_OBJECT
        AND  JA_SEQ      = AREC_TBL.CJ_SEQ;
    END IF;
    IF AREC_TBL.CJ_RATE IS NOT NULL THEN
      UPDATE A_TBL
      SET    JA_RATE     = AREC_TBL.CJ_RATE
      WHERE  JA_YEAR     = TO_NUMBER(SUBSTR(AREC_TBL.CJ_LASTDATE,1,4))
        AND  JA_MONTH    >= TO_NUMBER(SUBSTR(AREC_TBL.CJ_LASTDATE,5,2))
        AND  JA_OBJECT   = AREC_TBL.CJ_OBJECT
        AND  JA_SEQ      = AREC_TBL.CJ_SEQ;
    END IF;
    IF AREC_TBL.CJ_TAXCODE IS NOT NULL THEN
      UPDATE A_TBL
      SET    JA_TAXCODE  = AREC_TBL.CJ_TAXCODE
      WHERE  JA_YEAR     = TO_NUMBER(SUBSTR(AREC_TBL.CJ_LASTDATE,1,4))
        AND  JA_MONTH    >= TO_NUMBER(SUBSTR(AREC_TBL.CJ_LASTDATE,5,2))
        AND  JA_OBJECT   = AREC_TBL.CJ_OBJECT
        AND  JA_SEQ      = AREC_TBL.CJ_SEQ;
    END IF;
  END UPDATE_A_TBL;
----------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_TBL(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
    CURSOR CUR_TBL IS
    SELECT CJ_YEAR, CJ_MONTH, CJ_LASTDATE, CJ_OBJECT, CJ_SEQ, CJ_MINAMNT,
           CJ_MAXAMNT, CJ_RATE, CJ_TAXCODE
    FROM P835
    WHERE  CJ_YEAR = AYEAR-1
      OR  (CJ_YEAR = AYEAR
      AND  CJ_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CJ_YEAR, CJ_MONTH, CJ_LASTDATE;
  BEGIN
    FOR REC_TBL IN CUR_TBL LOOP
      UPDATE_A_TBL(REC_TBL);
    END LOOP;
  END PROCESS_TBL;
----------------------------------------------------------------------------------------------
  PROCEDURE FILLA_FRM(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  BEGIN
    INSERT INTO  A_FRM(FO_YEAR, FO_MONTH, FO_MAINOBJ, FO_LEVELCALC, FO_SEQ, FO_MAINOP,
                       FO_OBJ1, FO_METHOD1, FO_RATE1, FO_OPERATE1, FO_OBJ2, FO_METHOD2,
                       FO_RATE2, FO_OPERATE2, FO_OBJ3, FO_METHOD3, FO_RATE3, FO_FACTOR, FO_MAXAMNT)
           SELECT FO_YEAR, FO_MONTH, FO_MAINOBJ, FO_LEVELCALC, FO_SEQ, FO_MAINOP,
                  FO_OBJ1, FO_METHOD1, FO_RATE1, FO_OPERATE1, FO_OBJ2, FO_METHOD2,
                  FO_RATE2, FO_OPERATE2, FO_OBJ3, FO_METHOD3, FO_RATE3, FO_FACTOR, FO_MAXAMNT
           FROM   P313
           WHERE  FO_YEAR = AYEAR-1
             OR  (FO_YEAR = AYEAR
             AND  FO_MONTH BETWEEN 1 AND (AMONTH-1));
  END FILLA_FRM;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_FRM(AREC_FRM CUR_FRM%ROWTYPE) IS
  BEGIN
    IF AREC_FRM.CF_MAINOP IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_MAINOP   = AREC_FRM.CF_MAINOP
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_OBJ1 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_OBJ1     = AREC_FRM.CF_OBJ1
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_METHOD1 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_METHOD1  = AREC_FRM.CF_METHOD1
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_RATE1 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_RATE1    = AREC_FRM.CF_RATE1
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_OPERATE1 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_OPERATE1 = AREC_FRM.CF_OPERATE1
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_OBJ2 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_OBJ2     = AREC_FRM.CF_OBJ2
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_METHOD2 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_METHOD2  = AREC_FRM.CF_METHOD2
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_RATE2 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_RATE2    = AREC_FRM.CF_RATE2
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_OPERATE2 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_OPERATE2 = AREC_FRM.CF_OPERATE2
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_OBJ3 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_OBJ3     = AREC_FRM.CF_OBJ3
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_METHOD3 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_METHOD3  = AREC_FRM.CF_METHOD3
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_RATE3 IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_RATE3    = AREC_FRM.CF_RATE3
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_FACTOR IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_FACTOR   = AREC_FRM.CF_FACTOR
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
    IF AREC_FRM.CF_MAXAMNT IS NOT NULL THEN
      UPDATE A_FRM
      SET    FO_MAXAMNT  = AREC_FRM.CF_MAXAMNT
      WHERE  FO_YEAR     = TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,1,4))
        AND  FO_MONTH    >= TO_NUMBER(SUBSTR(AREC_FRM.CF_LASTDATE,5,2))
        AND  FO_MAINOBJ  = AREC_FRM.CF_MAINOBJ
        AND  FO_SEQ      = AREC_FRM.CF_SEQ;
    END IF;
  END UPDATE_A_FRM;
----------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_FRM(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
    CURSOR CUR_FRM IS
    SELECT CF_YEAR, CF_MONTH, CF_LASTDATE, CF_MAINOBJ, CF_LEVELCALC, CF_SEQ,
           CF_MAINOP, CF_OBJ1, CF_METHOD1, CF_RATE1, CF_OPERATE1, CF_OBJ2, CF_METHOD2,
           CF_RATE2, CF_OPERATE2, CF_OBJ3, CF_METHOD3, CF_RATE3, CF_FACTOR, CF_MAXAMNT
    FROM   P836
    WHERE  CF_YEAR = AYEAR-1
      OR  (CF_YEAR = AYEAR
      AND  CF_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CF_YEAR, CF_MONTH, CF_LASTDATE;
  BEGIN
    FOR REC_FRM IN CUR_FRM LOOP
      UPDATE_A_FRM(REC_FRM);
    END LOOP;
  END PROCESS_FRM;
----------------------------------------------------------------------------------------------
  PROCEDURE FILLA_ETC(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  BEGIN
    INSERT INTO  A_ETC(ET_YEAR, ET_MONTH, ET_CHILD, ET_CHILDAMNT, ET_CHILDOBJ, ET_HOUSESINGLE,
                       ET_HOUSEMARRIED, ET_HOUSEMOEEL, ET_HOUSEOBJ, ET_FOODSINGLE, ET_FOODMARRIED,
                       ET_FOODMOEEL, ET_FOODOBJ, ET_BONSINGLE, ET_BONMARRIED, ET_BONMOEEL,
                       ET_MINDAYSBON, ET_MAXDAYSBON, ET_BASEBON, ET_MINWAGE, ET_MINWORKAMNT,
                       ET_PERCENTOFPAYMENT, ET_YEARLEAVE, ET_MAXSAVELEAVE, ET_MAXWORKHOUR,
                       ET_ROUNDAMNT, ET_SAVECALC, ET_MAXCOMP, ET_ROUNDTYPE, ET_ROUNDDEL,
                       ET_WWORKINSCODE, ET_LEARNCODE)
           SELECT ET_YEAR, ET_MONTH, ET_CHILD, ET_CHILDAMNT, ET_CHILDOBJ, ET_HOUSESINGLE,
                  ET_HOUSEMARRIED, ET_HOUSEMOEEL, ET_HOUSEOBJ, ET_FOODSINGLE, ET_FOODMARRIED,
                  ET_FOODMOEEL, ET_FOODOBJ, ET_BONSINGLE, ET_BONMARRIED, ET_BONMOEEL,
                  ET_MINDAYSBON, ET_MAXDAYSBON, ET_BASEBON, ET_MINWAGE, ET_MINWORKAMNT,
                  ET_PERCENTOFPAYMENT, ET_YEARLEAVE, ET_MAXSAVELEAVE, ET_MAXWORKHOUR,
                  ET_ROUNDAMNT, ET_SAVECALC, ET_MAXCOMP, ET_ROUNDTYPE, ET_ROUNDDEL,
                  ET_WWORKINSCODE, ET_LEARNCODE
           FROM   P326
           WHERE  ET_YEAR = AYEAR-1
             OR  (ET_YEAR = AYEAR
             AND  ET_MONTH BETWEEN 1 AND (AMONTH-1));
  END FILLA_ETC;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_ETC(AREC_ETC CUR_ETC%ROWTYPE) IS
  BEGIN
    IF AREC_ETC.CE_CHILD IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_CHILD    = AREC_ETC.CE_CHILD
      WHERE  ET_YEAR     = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH    >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_CHILDAMNT IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_CHILDAMNT= AREC_ETC.CE_CHILDAMNT
      WHERE  ET_YEAR     = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH    >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_CHILDOBJ IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_CHILDOBJ = AREC_ETC.CE_CHILDOBJ
      WHERE  ET_YEAR     = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH    >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_HOUSESINGLE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_HOUSESINGLE = AREC_ETC.CE_HOUSESINGLE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_HOUSEMARRIED IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_HOUSEMARRIED= AREC_ETC.CE_HOUSEMARRIED
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_HOUSEMOEEL IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_HOUSEMOEEL  = AREC_ETC.CE_HOUSEMOEEL
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_HOUSEOBJ IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_HOUSEOBJ    = AREC_ETC.CE_HOUSEOBJ
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_FOODSINGLE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_FOODSINGLE  = AREC_ETC.CE_FOODSINGLE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_FOODMARRIED IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_FOODMARRIED = AREC_ETC.CE_FOODMARRIED
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_FOODMOEEL IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_FOODMOEEL   = AREC_ETC.CE_FOODMOEEL
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_FOODOBJ IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_FOODOBJ     = AREC_ETC.CE_FOODOBJ
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_BONSINGLE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_BONSINGLE   = AREC_ETC.CE_BONSINGLE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_BONMARRIED IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_BONMARRIED  = AREC_ETC.CE_BONMARRIED
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_BONMARRIED IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_BONMARRIED  = AREC_ETC.CE_BONMARRIED
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_BONMOEEL IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_BONMOEEL    = AREC_ETC.CE_BONMOEEL
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_MINDAYSBON IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_MINDAYSBON  = AREC_ETC.CE_MINDAYSBON
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_MAXDAYSBON IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_MAXDAYSBON  = AREC_ETC.CE_MAXDAYSBON
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_BASEBON IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_BASEBON     = AREC_ETC.CE_BASEBON
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_MINWAGE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_MINWAGE     = AREC_ETC.CE_MINWAGE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_MINWORKAMNT IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_MINWORKAMNT = AREC_ETC.CE_MINWORKAMNT
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_PERCENTOFPAYMENT IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_PERCENTOFPAYMENT = AREC_ETC.CE_PERCENTOFPAYMENT
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_YEARLEAVE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_YEARLEAVE   = AREC_ETC.CE_YEARLEAVE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_MAXSAVELEAVE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_MAXSAVELEAVE= AREC_ETC.CE_MAXSAVELEAVE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_MAXWORKHOUR IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_MAXWORKHOUR = AREC_ETC.CE_MAXWORKHOUR
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_ROUNDAMNT IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_ROUNDAMNT   = AREC_ETC.CE_ROUNDAMNT
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_SAVECALC IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_SAVECALC    = AREC_ETC.CE_SAVECALC
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_MAXCOMP IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_MAXCOMP     = AREC_ETC.CE_MAXCOMP
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_ROUNDTYPE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_ROUNDTYPE   = AREC_ETC.CE_ROUNDTYPE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_ROUNDDEL IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_ROUNDDEL    = AREC_ETC.CE_ROUNDDEL
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_WWORKINSCODE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_WWORKINSCODE= AREC_ETC.CE_WWORKINSCODE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
    IF AREC_ETC.CE_LEARNCODE IS NOT NULL THEN
      UPDATE A_ETC
      SET    ET_LEARNCODE   = AREC_ETC.CE_LEARNCODE
      WHERE  ET_YEAR        = TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,1,4))
        AND  ET_MONTH       >= TO_NUMBER(SUBSTR(AREC_ETC.CE_LASTDATE,5,2));
    END IF;
  END UPDATE_A_ETC;
----------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_ETC(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  CURSOR CUR_ETC IS
    SELECT CE_YEAR, CE_MONTH, CE_LASTDATE, CE_CHILD, CE_CHILDAMNT, CE_CHILDOBJ,
             CE_HOUSESINGLE, CE_HOUSEMARRIED, CE_HOUSEMOEEL, CE_HOUSEOBJ, CE_FOODSINGLE,
             CE_FOODMARRIED, CE_FOODMOEEL, CE_FOODOBJ, CE_BONSINGLE, CE_BONMARRIED,
             CE_BONMOEEL, CE_MINDAYSBON, CE_MAXDAYSBON, CE_BASEBON, CE_MINWAGE,
             CE_MINWORKAMNT, CE_PERCENTOFPAYMENT, CE_YEARLEAVE, CE_MAXSAVELEAVE,
             CE_MAXWORKHOUR, CE_ROUNDAMNT, CE_SAVECALC, CE_MAXCOMP, CE_ROUNDTYPE,
             CE_ROUNDDEL, CE_WWORKINSCODE, CE_LEARNCODE
    FROM P837
    WHERE  CE_YEAR = AYEAR-1
      OR  (CE_YEAR = AYEAR
      AND  CE_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CE_YEAR, CE_MONTH, CE_LASTDATE;
  BEGIN
    FOR REC_ETC IN CUR_ETC LOOP
      UPDATE_A_ETC(REC_ETC);
    END LOOP;
  END PROCESS_ETC;
----------------------------------------------------------------------------------------------
  PROCEDURE FILLA_WRK(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  BEGIN
    INSERT INTO  A_WRK(WO_YEAR, WO_MONTH, WO_CODE, WO_DESC, WO_OBJ1, WO_OBJ2, WO_OBJ3,
                       WO_OBJ4, WO_OBJ5, WO_OBJ6, WO_OBJ7, WO_OBJ8, WO_OBJ9, WO_OBJ10)
           SELECT WO_YEAR, WO_MONTH, WO_CODE, WO_DESC, WO_OBJ1, WO_OBJ2, WO_OBJ3,
                       WO_OBJ4, WO_OBJ5, WO_OBJ6, WO_OBJ7, WO_OBJ8, WO_OBJ9, WO_OBJ10
           FROM   P318
           WHERE  WO_YEAR = AYEAR-1
             OR  (WO_YEAR = AYEAR
             AND  WO_MONTH BETWEEN 1 AND (AMONTH-1));
  END FILLA_WRK;
----------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_A_WRK(AREC_WRK CUR_WRK%ROWTYPE) IS
  BEGIN
    IF AREC_WRK.CW_OBJ1 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ1     = AREC_WRK.CW_OBJ1
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ2 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ2     = AREC_WRK.CW_OBJ2
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ3 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ3     = AREC_WRK.CW_OBJ3
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ4 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ4     = AREC_WRK.CW_OBJ4
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ5 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ5     = AREC_WRK.CW_OBJ5
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ6 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ6     = AREC_WRK.CW_OBJ6
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ7 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ7     = AREC_WRK.CW_OBJ7
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ8 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ8     = AREC_WRK.CW_OBJ8
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ9 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ9     = AREC_WRK.CW_OBJ9
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
    IF AREC_WRK.CW_OBJ10 IS NOT NULL THEN
      UPDATE A_WRK
      SET    WO_OBJ10    = AREC_WRK.CW_OBJ10
      WHERE  WO_YEAR     = TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,1,4))
        AND  WO_MONTH    >= TO_NUMBER(SUBSTR(AREC_WRK.CW_LASTDATE,5,2))
        AND  WO_CODE     = AREC_WRK.CW_CODE;
    END IF;
  END UPDATE_A_WRK;
----------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_WRK(AYEAR IN INTEGER, AMONTH IN INTEGER) IS
  CURSOR CUR_WRK IS
    SELECT CW_YEAR, CW_MONTH, CW_LASTDATE, CW_CODE, CW_OBJ1, CW_OBJ2,
              CW_OBJ3, CW_OBJ4, CW_OBJ5, CW_OBJ6, CW_OBJ7, CW_OBJ8, CW_OBJ9, CW_OBJ10
    FROM P838
    WHERE  CW_YEAR = AYEAR-1
      OR  (CW_YEAR = AYEAR
      AND  CW_MONTH BETWEEN 1 AND AMONTH)
    ORDER BY CW_YEAR, CW_MONTH, CW_LASTDATE;
  BEGIN
    FOR REC_WRK IN CUR_WRK LOOP
      UPDATE_A_WRK(REC_WRK);
    END LOOP;
  END PROCESS_WRK;
---------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_BASE_INFO(AYEAR IN INTEGER , AMONTH IN INTEGER) IS
  BEGIN
    FILLA_PERSONEL(AYEAR,AMONTH);
    FILLA_INS(AYEAR,AMONTH);
    PROCESS_INS(AYEAR,AMONTH);
    FILLA_TAX(AYEAR,AMONTH);
    PROCESS_TAX(AYEAR,AMONTH);
    FILLA_OBJ(AYEAR,AMONTH);
    PROCESS_OBJ(AYEAR,AMONTH);
    FILLA_SEC(AYEAR,AMONTH);
    PROCESS_SEC(AYEAR,AMONTH);
    FILLA_TBL(AYEAR,AMONTH);
    PROCESS_TBL(AYEAR,AMONTH);
    FILLA_FRM(AYEAR,AMONTH);
    PROCESS_FRM(AYEAR,AMONTH);
    FILLA_ETC(AYEAR,AMONTH);
    PROCESS_ETC(AYEAR,AMONTH);
    FILLA_WRK(AYEAR,AMONTH);
    PROCESS_WRK(AYEAR,AMONTH);
  END PROCESS_BASE_INFO;
---------------------------------------------------------------------------------------------
  PROCEDURE FILLA_PRS(AYEAR IN INTEGER , AMONTH IN INTEGER, I IN INTEGER, IDNO IN VARCHAR2) IS
    K INTEGER;
  BEGIN
    K:= I;
    WHILE K <= (AYEAR*100+(AMONTH-1)) LOOP
      INSERT INTO A_PRS(MS_YEAR, MS_MONTH, MS_IDNO, MS_MARRIED, MS_CHILD, MS_PERSON,
                  MS_HIREDATE, MS_HIRETYPE, MS_JOB, MS_LOCATION, MS_COSTCENTER, MS_MAJORINS,
                  MS_DETAILNO, MS_WAGETYPE, MS_MINHOUR, MS_MAXHOUR, MS_PAYPLACE1, MS_ACCOUNT1,
                  MS_PAYPLACE2, MS_ACCOUNT2, MS_PAYPLACE3, MS_ACCOUNT3, MS_PAYPLACE4,
                  MS_ACCOUNT4, MS_PAYPLACE5, MS_ACCOUNT5, MS_STATUS, MS_WORKGROUP)
      SELECT MS_YEAR, MS_MONTH, MS_IDNO, MS_MARRIED, MS_CHILD, MS_PERSON,
             MS_HIREDATE, MS_HIRETYPE, MS_JOB, MS_LOCATION, MS_COSTCENTER, MS_MAJORINS,
             MS_DETAILNO, MS_WAGETYPE, MS_MINHOUR, MS_MAXHOUR, MS_PAYPLACE1, MS_ACCOUNT1,
             MS_PAYPLACE2, MS_ACCOUNT2, MS_PAYPLACE3, MS_ACCOUNT3, MS_PAYPLACE4,
             MS_ACCOUNT4, MS_PAYPLACE5, MS_ACCOUNT5, MS_STATUS, MS_WORKGROUP
      FROM   P115
      WHERE  MS_YEAR  = TRUNC(K/100)
        AND  MS_MONTH = MOD(K,100)
        AND  MS_IDNO  = IDNO;
      K:= NEXT_MONTH(K);
    END LOOP;
  END FILLA_PRS;
---------------------------------------------------------------------------------------------
  PROCEDURE UPDATEA_PRS(AYEAR IN INTEGER , AMONTH IN INTEGER, I IN INTEGER, IDNO IN VARCHAR2) IS
    CURSOR CUR_PRS IS
    SELECT CM_YEAR, CM_MONTH, CM_LASTDATE, CM_IDNO, CM_MARRIED, CM_CHILD,
           CM_HIRETYPE, CM_WAGETYPE
    FROM   P811
    WHERE  CM_LASTDATE BETWEEN I AND (AYEAR*100+AMONTH)
      AND  CM_IDNO   = IDNO
      AND  ((CM_YEAR = AYEAR AND CM_MONTH <= AMONTH) OR (CM_YEAR = AYEAR - 1))
    ORDER  BY (CM_YEAR*100+CM_MONTH);
    K INTEGER;
  BEGIN
    FOR REC_PRS IN CUR_PRS LOOP
      K:= I;
      WHILE K <= (AYEAR*100+(AMONTH-1)) LOOP
        IF REC_PRS.CM_MARRIED IS NOT NULL THEN
          UPDATE A_PRS
          SET    MS_MARRIED  = REC_PRS.CM_MARRIED
          WHERE  MS_YEAR     = TRUNC(K/100)
            AND  MS_MONTH    = MOD(K,100)
            AND  MS_IDNO     = REC_PRS.CM_IDNO;
        END IF;
        IF REC_PRS.CM_CHILD IS NOT NULL THEN
          UPDATE A_PRS
          SET    MS_CHILD    = REC_PRS.CM_CHILD
          WHERE  MS_YEAR     = TRUNC(K/100)
            AND  MS_MONTH    = MOD(K,100)
            AND  MS_IDNO     = REC_PRS.CM_IDNO;
        END IF;
        IF REC_PRS.CM_HIRETYPE IS NOT NULL THEN
          UPDATE A_PRS
          SET    MS_HIRETYPE = REC_PRS.CM_HIRETYPE
          WHERE  MS_YEAR     = TRUNC(K/100)
            AND  MS_MONTH    = MOD(K,100)
            AND  MS_IDNO     = REC_PRS.CM_IDNO;
        END IF;
        IF REC_PRS.CM_WAGETYPE IS NOT NULL THEN
          UPDATE A_PRS
          SET    MS_WAGETYPE = REC_PRS.CM_WAGETYPE
          WHERE  MS_YEAR     = TRUNC(K/100)
            AND  MS_MONTH    = MOD(K,100)
            AND  MS_IDNO     = REC_PRS.CM_IDNO;
        END IF;
        K:= NEXT_MONTH(K);
      END LOOP;
    END LOOP;
  END UPDATEA_PRS;
---------------------------------------------------------------------------------------------
  PROCEDURE FILLA_PRSOBJ(AYEAR IN INTEGER , I IN INTEGER, IDNO IN VARCHAR2) IS
    IYEAR  INTEGER;
    IMONTH INTEGER;
    TEMP   INTEGER;
  BEGIN
    IYEAR := TRUNC(I/100);
    IMONTH:= MOD(I,100);
    INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                         OP_WRKAMNT, OP_CREATOR)
    SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
           OP_WRKAMNT, OP_CREATOR
    FROM   P130
    WHERE  OP_YEAR   = IYEAR
      AND  OP_MONTH  = IMONTH
      AND  OP_IDNO   = IDNO
      AND  OP_CREATOR= 1;
    INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                         OP_WRKAMNT, OP_CREATOR)
    SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
           OP_WRKAMNT, OP_CREATOR
    FROM   P130
    WHERE  OP_YEAR   = IYEAR
      AND  OP_MONTH  = IMONTH
      AND  OP_IDNO   = IDNO
      AND  OP_CREATOR= 3;
    INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                         OP_WRKAMNT, OP_CREATOR)
    SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, NULL,
           NULL, OP_CREATOR
    FROM   P130
    WHERE  OP_YEAR   = IYEAR
      AND  OP_MONTH  = IMONTH
      AND  OP_IDNO   = IDNO
      AND  OP_CREATOR= 0;
    INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                         OP_WRKAMNT, OP_CREATOR)
    SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, NULL,
           NULL, OP_CREATOR
    FROM   P130
    WHERE  OP_YEAR   = IYEAR
      AND  OP_MONTH  = IMONTH
      AND  OP_IDNO   = IDNO
      AND  OP_CREATOR= 999;
/*      AND  OP_CREATOR= 0;
    INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                         OP_WRKAMNT, OP_CREATOR)
    SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
           OP_WRKAMNT, OP_CREATOR
    FROM   P130
    WHERE  OP_YEAR   = IYEAR
      AND  OP_MONTH  = IMONTH
      AND  OP_IDNO   = IDNO
      AND  OP_CREATOR<> 101;
    FOR K IN 101..109 LOOP
      INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                           OP_WRKAMNT, OP_CREATOR)
      SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
             OP_WRKAMNT, OP_CREATOR
      FROM   P130
      WHERE  OP_YEAR   = IYEAR
        AND  OP_MONTH  = IMONTH
        AND  OP_IDNO   = IDNO
        AND  OP_OBJECT = K;
    END LOOP;*/
  END FILLA_PRSOBJ;
---------------------------------------------------------------------------------------------
  PROCEDURE FILLA_PRSOBJP130(AYEAR IN INTEGER , I IN INTEGER, IDNO IN VARCHAR2) IS
    IYEAR  INTEGER;
    IMONTH INTEGER;
  BEGIN
    IMONTH:= MOD(I,100)-1;
    IYEAR := TRUNC(I/100);
    FOR J IN 1..IMONTH LOOP
      FOR K IN 1..9 LOOP
        INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                             OP_WRKAMNT, OP_CREATOR)
        SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
               OP_WRKAMNT, OP_CREATOR
        FROM   P130
        WHERE  OP_YEAR   = IYEAR
          AND  OP_MONTH  = J
          AND  OP_IDNO   = IDNO
          AND  OP_OBJECT = 6000+K;
        INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                             OP_WRKAMNT, OP_CREATOR)
        SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
               OP_WRKAMNT, OP_CREATOR
        FROM   P130
        WHERE  OP_YEAR   = IYEAR
          AND  OP_MONTH  = J
          AND  OP_IDNO   = IDNO
          AND  OP_OBJECT = 3000+K;
      END LOOP;
    END LOOP;
  END FILLA_PRSOBJP130;
---------------------------------------------------------------------------------------------
  PROCEDURE UPDATEA_PRSOBJ(AYEAR IN INTEGER , AMONTH IN INTEGER, I IN INTEGER, IDNO IN VARCHAR2) IS
    CURSOR CUR_PRSOBJ(PTYPE INTEGER) IS
    SELECT CP_YEAR, CP_MONTH, CP_OBJECT, CP_FACTOR
    FROM   P820
    WHERE  CP_LASTDATE = TO_CHAR(I)
      AND  CP_IDNO     = IDNO
      AND  ((CP_YEAR   = AYEAR AND CP_MONTH <= AMONTH) OR (AYEAR = AYEAR - 1))
      AND  CP_STATUS   = PTYPE
    ORDER  BY (CP_YEAR*100+CP_MONTH) DESC;
    POBJ   INTEGER;
    TFLAG  INTEGER;
    TEMP   BOOLEAN;
  BEGIN
    POBJ:= 0;
    FOR REC_PRSOBJ IN CUR_PRSOBJ(0) LOOP
      IF SUBSTR(REC_PRSOBJ.CP_OBJECT,1,1) IN (1,3,5) THEN
        TFLAG:= 1;
      ELSE
        TFLAG:= 0;
      END IF;
      IF POBJ <> REC_PRSOBJ.CP_OBJECT THEN
        POBJ := REC_PRSOBJ.CP_OBJECT;
        BEGIN
          INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                               OP_WRKAMNT, OP_CREATOR, OP_FLAG)
          VALUES(TRUNC(I/100), MOD(I,100), IDNO, REC_PRSOBJ.CP_OBJECT, REC_PRSOBJ.CP_FACTOR, 0, 0, 0, TFLAG);
        EXCEPTION
          WHEN DUP_VAL_ON_INDEX THEN
            TEMP:= TRUE;
        END;
        DELETE FROM A_DELOBJ
        WHERE  OBJ = REC_PRSOBJ.CP_OBJECT;
      END IF;
    END LOOP;
    POBJ:= 0;
    FOR REC_PRSOBJ IN CUR_PRSOBJ(1) LOOP
      IF SUBSTR(REC_PRSOBJ.CP_OBJECT,1,1) IN (1,3,5) THEN
        TFLAG:= 1;
      ELSE
        TFLAG:= 0;
      END IF;
      IF POBJ <> REC_PRSOBJ.CP_OBJECT THEN
        POBJ := REC_PRSOBJ.CP_OBJECT;
        IF REC_PRSOBJ.CP_FACTOR IS NOT NULL THEN
          UPDATE A_PRSOBJ
          SET    OP_FACTOR   = REC_PRSOBJ.CP_FACTOR,
                 OP_FLAG     = TFLAG
          WHERE  OP_YEAR     = TRUNC(I/100)
            AND  OP_MONTH    = MOD(I,100)
            AND  OP_IDNO     = IDNO
            AND  OP_OBJECT   = REC_PRSOBJ.CP_OBJECT;
        ELSE
          IF TFLAG = 1 THEN
            UPDATE A_PRSOBJ
            SET    OP_FLAG     = TFLAG
            WHERE  OP_YEAR     = TRUNC(I/100)
              AND  OP_MONTH    = MOD(I,100)
              AND  OP_IDNO     = IDNO
              AND  OP_OBJECT   = REC_PRSOBJ.CP_OBJECT;
          END IF;
        END IF;
        DELETE FROM A_DELOBJ
        WHERE  OBJ = REC_PRSOBJ.CP_OBJECT;
      END IF;
    END LOOP;
    FOR REC_PRSOBJ IN CUR_PRSOBJ(2) LOOP
      INSERT INTO A_DELOBJ
      VALUES(REC_PRSOBJ.CP_OBJECT);
    END LOOP;
    DELETE FROM A_PRSOBJ
      WHERE  OP_YEAR  = TRUNC(I/100)
        AND  OP_MONTH = MOD(I,100)
        AND  OP_IDNO  = IDNO
        AND  OP_OBJECT IN (SELECT OBJ FROM A_DELOBJ);
  END UPDATEA_PRSOBJ;
---------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_ACCUMULATE(AYEAR IN INTEGER, AMONTH IN INTEGER, I IN INTEGER, IDNO IN VARCHAR2) IS
    CURSOR ACC_OBJ_CUR IS
    SELECT OB_CODE
    FROM   P305
    WHERE  OB_CODE             = TRUNC(I/100)
      AND  OB_MONTH            = MOD(I,100)
      AND  NVL(OB_ACCUMULATE,0)= 1;
    FACTOR  NUMBER;
    AMOUNT  NUMBER;
  BEGIN
    FOR ACC_OBJ_REC IN ACC_OBJ_CUR LOOP
      IF ACC_OBJ_REC.OB_CODE NOT IN (5061, 5062) THEN
        BEGIN
          SELECT BP_NFACTOR - BP_OFACTOR , BP_NWRKAMNT - BP_OWRKAMNT
          INTO   FACTOR, AMOUNT
          FROM   P730_T
          WHERE  BP_DATEYY   = AYEAR
            AND  BP_DATEMM   = AMONTH
            AND  BP_IDNO     = IDNO
            AND  BP_OBJECT   = ACC_OBJ_REC.OB_CODE
            AND  BP_PROCESSYY= TRUNC(I/100)
            AND     BP_PROCESSMM= MOD(I,100);
          IF NVL(FACTOR,0) < 0 THEN
            FACTOR:= 0;
          END IF;
          IF NVL(AMOUNT,0) < 0 THEN
            AMOUNT:= 0;
          END IF;
          UPDATE P700
          SET    AP_FACTOR = NVL(FACTOR,0),
                 AP_AMOUNT = NVL(AMOUNT,0)
          WHERE  AP_YEAR   = TRUNC(I/100)
            AND  AP_MONTH  = MOD(I,100)
            AND  AP_IDNO   = IDNO
            AND  AP_OBJECT = ACC_OBJ_REC.OB_CODE;
        EXCEPTION
          WHEN NO_DATA_FOUND THEN
            FACTOR:= 0;
        END;
      END IF;
    END LOOP;
  END;
---------------------------------------------------------------------------------------------
  PROCEDURE TRANSA_PRSOBJ(AYEAR IN INTEGER , I IN INTEGER, IDNO IN VARCHAR2, MS_DATE IN INTEGER) IS
    TYEAR  INTEGER;
    TMONTH INTEGER;
    CURSOR CUR_PRSOBJ IS
    SELECT OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
           OP_WRKAMNT, OP_CREATOR, OP_FLAG
    FROM   A_PRSOBJ
    WHERE  OP_YEAR  = TYEAR
      AND  OP_MONTH = TMONTH
      AND  OP_IDNO  = IDNO
      AND  OP_FLAG  = 1;
    ROUNDTYPE INTEGER;
  BEGIN
    IF MOD(I,100) = 1 THEN
      TYEAR := TRUNC(I/100)-1;
      TMONTH:= 12;
    ELSE
      TYEAR := TRUNC(I/100);
      TMONTH:= MOD(I,100)-1;
    END IF;
    FOR REC_PRSOBJ IN CUR_PRSOBJ LOOP
      BEGIN
        INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                               OP_WRKAMNT, OP_CREATOR, OP_FLAG)
        VALUES(TRUNC(I/100), MOD(I,100), IDNO, REC_PRSOBJ.OP_OBJECT, REC_PRSOBJ.OP_FACTOR,
               REC_PRSOBJ.OP_AMOUNT, REC_PRSOBJ.OP_WRKAMNT, REC_PRSOBJ.OP_CREATOR, REC_PRSOBJ.OP_FLAG);
      EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
          UPDATE A_PRSOBJ
          SET    OP_FACTOR = REC_PRSOBJ.OP_FACTOR,
                 OP_AMOUNT = REC_PRSOBJ.OP_AMOUNT,
                 OP_WRKAMNT= REC_PRSOBJ.OP_WRKAMNT,
                 OP_FLAG   = 1
          WHERE  OP_YEAR   = TRUNC(I/100)
            AND  OP_MONTH  = MOD(I,100)
            AND  OP_IDNO   = IDNO
            AND  OP_OBJECT = REC_PRSOBJ.OP_OBJECT;
        WHEN OTHERS THEN
          RAISE;
      END;
    END LOOP;
    IF (TRUNC(I/100) = TRUNC(MS_DATE/100)) AND (MOD(I,100)=MOD(MS_DATE,100)) THEN
      NULL;
    ELSE
      BEGIN
        SELECT ET_ROUNDTYPE INTO ROUNDTYPE
        FROM   P326
        WHERE  ET_YEAR = TYEAR
          AND  ET_MONTH= TMONTH;
      EXCEPTION
        WHEN OTHERS THEN
          ROUNDTYPE := 0;
      END;
      IF ROUNDTYPE = 1 THEN
        DELETE
        FROM   A_PRSOBJ
        WHERE  OP_YEAR  = TRUNC(I/100)
          AND  OP_MONTH = MOD(I,100)
          AND  OP_OBJECT= 2051
          AND  OP_IDNO  = IDNO;

        INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                               OP_WRKAMNT, OP_CREATOR, OP_FLAG)
        SELECT TRUNC(I/100) , MOD(I,100), OP_IDNO, 2051, OP_FACTOR, OP_AMOUNT, OP_WRKAMNT, 1, 0
        FROM   P130
        WHERE  OP_YEAR  = TYEAR
          AND  OP_MONTH = TMONTH
          AND  OP_OBJECT= 4051
          AND  OP_IDNO  = IDNO;
      ELSE
        DELETE
        FROM   A_PRSOBJ
        WHERE  OP_YEAR  = TRUNC(I/100)
          AND  OP_MONTH = MOD(I,100)
          AND  OP_OBJECT= 4051
          AND  OP_IDNO  = IDNO;

        INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                               OP_WRKAMNT, OP_CREATOR, OP_FLAG)
        SELECT TRUNC(I/100) , MOD(I,100), OP_IDNO, 4051, OP_FACTOR, OP_AMOUNT, OP_WRKAMNT, 1, 0
        FROM   P130
        WHERE  OP_YEAR  = TYEAR
          AND  OP_MONTH = TMONTH
          AND  OP_OBJECT= 2051
          AND  OP_IDNO  = IDNO;
      END IF ;
      DELETE
      FROM   A_PRSOBJ
      WHERE  OP_YEAR  = TRUNC(I/100)
        AND  OP_MONTH = MOD(I,100)
        AND  OP_OBJECT= 4050
        AND  OP_IDNO  = IDNO;

      INSERT INTO A_PRSOBJ(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                             OP_WRKAMNT, OP_CREATOR, OP_FLAG)
      SELECT TRUNC(I/100) , MOD(I,100), OP_IDNO, 4050, OP_FACTOR, OP_AMOUNT, OP_WRKAMNT, 1, 0
      FROM   P130
      WHERE  OP_YEAR  = TYEAR
        AND  OP_MONTH = TMONTH
        AND  OP_OBJECT= 2050
        AND  OP_IDNO  = IDNO;
    END IF;
  END;
---------------------------------------------------------------------------------------------
  FUNCTION SELECTMAX_ADAPT(AYEAR IN INTEGER, AMONTH IN INTEGER, I IN INTEGER, IDNO IN VARCHAR2, TOBJECT IN INTEGER,
           FACTOR OUT NUMBER, AMOUNT OUT NUMBER, WRKAMNT OUT NUMBER) RETURN BOOLEAN IS
    TYEAR   INTEGER;
    TMONTH  INTEGER;
    TEMP    INTEGER;
  BEGIN
    FACTOR := 0;
    AMOUNT := 0;
    WRKAMNT:= 0;
    TEMP:= AYEAR*100+AMONTH-1;
    WHILE TEMP > I LOOP
      BEGIN
        SELECT NVL(BP_NFACTOR,0), NVL(BP_NAMOUNT,0), NVL(BP_NWRKAMNT,0)
        INTO   FACTOR, AMOUNT, WRKAMNT
        FROM   P730
        WHERE  BP_DATEYY    = TRUNC(TEMP/100)
          AND  BP_DATEMM    = MOD(TEMP,100)
          AND  BP_IDNO      = IDNO
          AND  BP_OBJECT    = TOBJECT
          AND  BP_PROCESSYY = TRUNC(I/100)
          AND  BP_PROCESSMM = MOD(I,100);
        RETURN TRUE;
      EXCEPTION
        WHEN NO_DATA_FOUND THEN
          TEMP:= PREV_MONTH(TEMP);
      END;
    END LOOP;
    RETURN FALSE;
  END;
---------------------------------------------------------------------------------------------
  PROCEDURE FILL_P730(AYEAR IN INTEGER , AMONTH IN INTEGER , I IN INTEGER, IDNO IN VARCHAR2, AFLAG IN INTEGER) IS
    CURSOR CUR_PRSOBJ IS
    SELECT P130.OP_OBJECT, P130.OP_AMOUNT P_AMOUNT, P130.OP_FACTOR P_FACTOR, P130.OP_WRKAMNT P_WRKAMNT,
           A_PRSOBJ.OP_AMOUNT T_AMOUNT, A_PRSOBJ.OP_FACTOR T_FACTOR, A_PRSOBJ.OP_WRKAMNT T_WRKAMNT
    FROM   P130, A_PRSOBJ
    WHERE  P130.OP_YEAR          = TRUNC(I/100)
      AND  P130.OP_MONTH         = MOD(I,100)
      AND  P130.OP_IDNO          = IDNO
      AND  A_PRSOBJ.OP_YEAR(+)   = TRUNC(I/100)
      AND  A_PRSOBJ.OP_MONTH(+)  = MOD(I,100)
      AND  A_PRSOBJ.OP_IDNO(+)   = IDNO
      AND  A_PRSOBJ.OP_OBJECT(+) = P130.OP_OBJECT
    UNION
    SELECT A_PRSOBJ.OP_OBJECT, P130.OP_AMOUNT P_AMOUNT, P130.OP_FACTOR P_FACTOR, P130.OP_WRKAMNT P_WRKAMNT,
           A_PRSOBJ.OP_AMOUNT T_AMOUNT, A_PRSOBJ.OP_FACTOR T_FACTOR, A_PRSOBJ.OP_WRKAMNT T_WRKAMNT
    FROM   P130, A_PRSOBJ
    WHERE  P130.OP_YEAR(+)    = TRUNC(I/100)
      AND  P130.OP_MONTH(+)   = MOD(I,100)
      AND  P130.OP_IDNO(+)    = IDNO
      AND  A_PRSOBJ.OP_YEAR   = TRUNC(I/100)
      AND  A_PRSOBJ.OP_MONTH  = MOD(I,100)
      AND  A_PRSOBJ.OP_IDNO   = IDNO
      AND  P130.OP_OBJECT(+)  = A_PRSOBJ.OP_OBJECT;
    TEMP INTEGER;
    WRKAMNT NUMBER;
    FACTOR  NUMBER;
    AMOUNT  NUMBER;
  BEGIN
    FOR REC_PRSOBJ IN CUR_PRSOBJ LOOP
      IF (REC_PRSOBJ.OP_OBJECT NOT IN (2060, 2061 , 4060, 4061, 5060, 5061, 5062, 8060, 8061, 8062)) AND
         ((REC_PRSOBJ.OP_OBJECT < 7000) OR (REC_PRSOBJ.OP_OBJECT > 8000)) THEN
        TEMP := TRUNC(I/100);
  /*      IF REC_PRSOBJ.OP_OBJECT < 1000 THEN
          INSERT INTO P730(BP_DATEYY, BP_DATEMM, BP_IDNO, BP_OBJECT, BP_PROCESSYY,
                           BP_PROCESSMM, BP_OFACTOR, BP_OWRKAMNT, BP_OAMOUNT, BP_NFACTOR, BP_NWRKAMNT, BP_NAMOUNT)
          VALUES (AYEAR, AMONTH, IDNO, REC_PRSOBJ.OP_OBJECT, TEMP,
                  MOD(I,100), 0, 0, 0, REC_PRSOBJ.T_FACTOR, REC_PRSOBJ.T_WRKAMNT, REC_PRSOBJ.T_AMOUNT);
        ELSE*/
          IF NOT SELECTMAX_ADAPT(AYEAR, AMONTH, I, IDNO, REC_PRSOBJ.OP_OBJECT, FACTOR, AMOUNT, WRKAMNT) THEN
            FACTOR := REC_PRSOBJ.P_FACTOR;
            AMOUNT := REC_PRSOBJ.P_AMOUNT;
            WRKAMNT:= REC_PRSOBJ.P_WRKAMNT;
          END IF;
          IF NVL(WRKAMNT,0) <> NVL(REC_PRSOBJ.T_WRKAMNT,0) THEN
            INSERT INTO P730(BP_DATEYY, BP_DATEMM, BP_IDNO, BP_OBJECT, BP_PROCESSYY,
                             BP_PROCESSMM, BP_OFACTOR, BP_OWRKAMNT, BP_OAMOUNT, BP_NFACTOR, BP_NWRKAMNT, BP_NAMOUNT)
            VALUES (AYEAR, AMONTH, IDNO, REC_PRSOBJ.OP_OBJECT, TEMP,
                    MOD(I,100), FACTOR, WRKAMNT, AMOUNT, REC_PRSOBJ.T_FACTOR, REC_PRSOBJ.T_WRKAMNT, REC_PRSOBJ.T_AMOUNT);
          END IF;
  --      END IF;
      END IF;
    END LOOP;
  END;
---------------------------------------------------------------------------------------------
  PROCEDURE INSERT_P130(AYEAR IN INTEGER, AMONTH IN INTEGER, AIDNO IN VARCHAR2, AOBJ IN INTEGER
                        , FACTOR IN NUMBER, AMOUNT IN NUMBER, WRKAMNT IN NUMBER) IS
  BEGIN
    INSERT INTO P130(OP_YEAR, OP_MONTH, OP_IDNO, OP_OBJECT, OP_FACTOR, OP_AMOUNT,
                     OP_WRKAMNT, OP_CREATOR)
    VALUES(AYEAR, AMONTH, AIDNO, AOBJ, FACTOR, AMOUNT, WRKAMNT, 3);
  END;
---------------------------------------------------------------------------------------------
  FUNCTION IS_PERSONEL(AYEAR IN INTEGER, AMONTH IN INTEGER, AIDNO IN VARCHAR2) RETURN BOOLEAN IS
    TSTATUS INTEGER;
  BEGIN
    BEGIN
      SELECT NVL(MS_STATUS,8)
      INTO   TSTATUS
      FROM   P115
      WHERE  MS_YEAR = AYEAR
        AND  MS_MONTH= AMONTH
        AND  MS_IDNO = AIDNO;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        TSTATUS:= 8;--
      WHEN OTHERS THEN
        RAISE;
    END;
    IF TSTATUS = 0 THEN
      RETURN TRUE;
    ELSE
      RETURN FALSE;
    END IF;
  END;
---------------------------------------------------------------------------------------------
  PROCEDURE INSERT_ADPVAL(AYEAR IN INTEGER, AMONTH IN INTEGER, AIDNO IN VARCHAR2, ADPVAL IN INTEGER, ISPRS IN BOOLEAN) IS
    TOBJECT INTEGER;
  BEGIN
    IF ADPVAL >= 0 THEN
      IF ISPRS THEN
        TOBJECT:= 2061;
      ELSE
        TOBJECT:= 2060;
      END IF;
    ELSE
      IF ISPRS  THEN
        TOBJECT:= 4061;
      ELSE
        TOBJECT:= 4060;
      END IF;
    END IF;
    INSERT_P130(AYEAR, AMONTH, AIDNO, TOBJECT, 0, 0, ABS(ADPVAL));
  END;
---------------------------------------------------------------------------------------------
  PROCEDURE UPDATE_STATUS_TBL(AYEAR IN INTEGER) IS
  BEGIN
    UPDATE STATUS_TABLE_T
    SET    S1 = 1
    WHERE  SYS_CODE     = 1
      AND  SYS_YEAR     = AYEAR
      AND  STATUS_TYPE  = 2
      AND  STATUS_PERIOD= 1;
  END;
---------------------------------------------------------------------------------------------
  FUNCTION SELECT_MOND_ADAPT(AYEAR IN INTEGER, AMONTH IN INTEGER,
                             IDNO IN VARCHAR2, OBJ IN INTEGER) RETURN NUMBER IS
    WRKAMNT NUMBER;
  BEGIN
    BEGIN
      SELECT NVL(SUM(NVL(BP_NWRKAMNT,0)-NVL(BP_OWRKAMNT,0)),0)
      INTO   WRKAMNT
      FROM   P730
      WHERE  BP_DATEYY = AYEAR
        AND  BP_DATEMM = AMONTH
        AND  BP_IDNO   = IDNO
        AND  BP_OBJECT = OBJ;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        WRKAMNT:= 0;
    END;
    RETURN(WRKAMNT);
  END;
---------------------------------------------------------------------------------------------
  FUNCTION SELECT_MYEAR_ADAPT(AYEAR IN INTEGER, AMONTH IN INTEGER,
                             IDNO IN VARCHAR2, OBJ IN INTEGER) RETURN NUMBER IS
    WRKAMNT NUMBER;
  BEGIN
    BEGIN
      SELECT NVL(SUM(NVL(BP_NWRKAMNT,0)-NVL(BP_OWRKAMNT,0)),0)
      INTO   WRKAMNT
      FROM   P730
      WHERE  BP_DATEYY   = AYEAR
        AND  BP_DATEMM   = AMONTH
        AND  BP_IDNO     = IDNO
        AND  BP_OBJECT   = OBJ;
--        AND  BP_PROCESSYY= AYEAR;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        WRKAMNT:= 0;
    END;
    RETURN(WRKAMNT);
  END;
---------------------------------------------------------------------------------------------
  FUNCTION ISYEAR_TAX(AYEAR IN INTEGER , AMONTH IN INTEGER, ACODE IN INTEGER) RETURN BOOLEAN IS
    TEMP INTEGER;
  BEGIN
    BEGIN
      SELECT NVL(TH_MTD,0)
      INTO   TEMP
      FROM   P302
      WHERE  TH_YEAR = AYEAR
        AND  TH_MONTH= AMONTH
        AND  TH_CODE = ACODE;
    EXCEPTION
      WHEN NO_DATA_FOUND THEN
        TEMP:=0;
    END;
    IF TEMP = 0 THEN
      RETURN(TRUE);
    ELSE
      RETURN(FALSE);
    END IF;
  END;
---------------------------------------------------------------------------------------------
  PROCEDURE PROCESS_PERSONEL(AYEAR IN INTEGER , AMONTH IN INTEGER) IS
    CURSOR CUR_PERSONEL IS
    SELECT AMS_IDNO, AMS_FLAG, AMS_DATE
    FROM   A_PERSONEL
    ORDER BY AMS_IDNO;
    TVAL   INTEGER;
    TEMP   INTEGER;
    I      INTEGER;
    ISPRS  BOOLEAN;
  BEGIN
--    SET TRANSACTION READ WRITE;
    DELETE FROM P130 WHERE OP_YEAR   = AYEAR AND OP_MONTH  = AMONTH AND OP_object =2060;
    DELETE FROM P130 WHERE OP_YEAR   = AYEAR AND OP_MONTH  = AMONTH AND OP_object =2061;
    DELETE FROM P130 WHERE OP_YEAR   = AYEAR AND OP_MONTH  = AMONTH AND OP_object =4060;
    DELETE FROM P130 WHERE OP_YEAR   = AYEAR AND OP_MONTH  = AMONTH AND OP_object =4061;
    FOR K IN 101..109 LOOP
      DELETE FROM P130 WHERE OP_YEAR = AYEAR AND OP_MONTH  = AMONTH AND OP_object =K;
    END LOOP;
    DELETE FROM P730 WHERE BP_DATEYY = AYEAR AND BP_DATEMM = AMONTH;
    DELETE FROM A_DTAX;
    DELETE FROM A_ETC;
    DELETE FROM A_FRM;
    DELETE FROM A_INS;
    DELETE FROM A_MTAX;
    DELETE FROM A_OBJ;
    DELETE FROM A_PERSONEL;
    DELETE FROM A_PRS;
    DELETE FROM A_PRSOBJ;
    DELETE FROM A_SEC;
    DELETE FROM A_TBL;
    DELETE FROM A_WRK;
    COMMIT;
    PROCESS_BASE_INFO(AYEAR, AMONTH);
    COMMIT;
    FOR REC_PERSONEL IN CUR_PERSONEL LOOP
      BEGIN
        IF REC_PERSONEL.AMS_IDNO='26927' THEN
          dbms_output.put_line(REC_PERSONEL.AMS_IDNO);
        END IF;
        DELETE FROM A_PRS;
        DELETE FROM A_PRSOBJ;
        DELETE FROM A_DELOBJ;

        I := TO_NUMBER(REC_PERSONEL.AMS_DATE);
        FILLA_PRS(AYEAR, AMONTH, I, REC_PERSONEL.AMS_IDNO);
        UPDATEA_PRS(AYEAR, AMONTH, I, REC_PERSONEL.AMS_IDNO);
        FILLA_PRSOBJP130(AYEAR, I, REC_PERSONEL.AMS_IDNO);
        COMMIT;
        WHILE I <= (AYEAR*100+(AMONTH-1)) LOOP
          FILLA_PRSOBJ(AYEAR, I, REC_PERSONEL.AMS_IDNO);
          TRANSA_PRSOBJ(AYEAR, I, REC_PERSONEL.AMS_IDNO, TO_NUMBER(REC_PERSONEL.AMS_DATE));
          UPDATEA_PRSOBJ(AYEAR, AMONTH, I, REC_PERSONEL.AMS_IDNO);
          COMMIT;
          TEMP:=CalcPkg.MainCalcProc(MOD(I,100), TRUNC(I/100), '0', '0', '0', '0', 0, REC_PERSONEL.AMS_IDNO, TRUE);
          FILL_P730(AYEAR, AMONTH, I, REC_PERSONEL.AMS_IDNO, REC_PERSONEL.AMS_FLAG);
          UPDATE_ACCUMULATE(AYEAR, AMONTH, I, REC_PERSONEL.AMS_IDNO);
          I:= NEXT_MONTH(I);
        END LOOP;

        ISPRS:= IS_PERSONEL(AYEAR, AMONTH, REC_PERSONEL.AMS_IDNO);
        FOR K IN 6001..6009 LOOP
          IF ISYEAR_TAX(AYEAR , AMONTH, MOD(K,10)) THEN
            TVAL:= NVL(SELECT_MYEAR_ADAPT(AYEAR, AMONTH, REC_PERSONEL.AMS_IDNO, K),0);
            IF TVAL <> 0 THEN
              INSERT_P130(AYEAR, AMONTH, REC_PERSONEL.AMS_IDNO, 100+MOD(K,10), 0, 0, TVAL);
            END IF;
          END IF;
        END LOOP;
        TVAL:= 0;
        FOR K IN 3001..3009 LOOP
          IF ISYEAR_TAX(AYEAR , AMONTH, MOD(K,10)) THEN
            TVAL:= TVAL+NVL(SELECT_MOND_ADAPT(AYEAR, AMONTH, REC_PERSONEL.AMS_IDNO, K),0);
          END IF;
        END LOOP;
        IF NOT ISPRS THEN
          TVAL:= 0;
        END IF;
        TVAL:= TVAL+NVL(SELECT_MOND_ADAPT(AYEAR, AMONTH, REC_PERSONEL.AMS_IDNO, 6000),0);
        TVAL:= TVAL-NVL(SELECT_MOND_ADAPT(AYEAR, AMONTH, REC_PERSONEL.AMS_IDNO, 2050),0);
        IF TVAL <> 0 THEN
          INSERT_ADPVAL(AYEAR, AMONTH, REC_PERSONEL.AMS_IDNO, TVAL, ISPRS);
        END IF;
        COMMIT;
      EXCEPTION
        WHEN OTHERS THEN
          ROLLBACK;
          RAISE;
      END;
    END LOOP;
--    UPDATE_STATUS_TBL(AYEAR);
    COMMIT;
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE;
  END;
---------------------------------------------------------------------------------------------
END ADAPT_CALC;
/
